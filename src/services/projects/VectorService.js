import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
/**
 * Service for handling project vector operations
 */
export class VectorService {
    /**
     * Create vector embeddings for a project
     *
     * @param projectId - The ID of the project
     * @param vectorData - The data to be embedded
     * @returns A promise that resolves to the created vector ID
     */
    static async createVectorEmbedding(projectId, vectorData) {
        try {
            // Generate a simple random embedding for testing
            // In production, this would be generated by an AI model or embedding service
            const embedding = Array(1536).fill(0).map(() => Math.random() - 0.5);
            const { data, error } = await supabase
                .from('project_vectors')
                .insert({
                project_id: projectId,
                vector_data: vectorData,
                embedding: embedding
            })
                .select('id')
                .single();
            if (error)
                throw error;
            console.log("Vector embedding created successfully:", data);
            return data.id;
        }
        catch (error) {
            console.error("Error creating vector embedding:", error);
            toast.error("Failed to create vector embedding");
            return null;
        }
    }
    /**
     * Delete a vector embedding
     *
     * @param vectorId - The ID of the vector to delete
     * @returns A promise that resolves to true if successful
     */
    static async deleteVector(vectorId) {
        try {
            const { error } = await supabase
                .from('project_vectors')
                .delete()
                .eq('id', vectorId);
            if (error)
                throw error;
            console.log("Vector deleted successfully");
            return true;
        }
        catch (error) {
            console.error("Error deleting vector:", error);
            toast.error("Failed to delete vector");
            return false;
        }
    }
    /**
     * Get all vector embeddings for a project
     *
     * @param projectId - The ID of the project
     * @returns A promise that resolves to an array of project vectors
     */
    static async getProjectVectors(projectId) {
        try {
            const { data, error } = await supabase
                .from('project_vectors')
                .select(`
          id,
          project_id,
          vector_data,
          embedding,
          created_at,
          updated_at,
          projects:project_id (
            name,
            user_id
          )
        `)
                .eq('project_id', projectId);
            if (error)
                throw error;
            return data || [];
        }
        catch (error) {
            console.error("Error fetching project vectors:", error);
            toast.error("Failed to fetch project vectors");
            return [];
        }
    }
}
