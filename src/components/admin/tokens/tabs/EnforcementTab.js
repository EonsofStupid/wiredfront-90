import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
export function EnforcementTab({ isTokenEnforcementEnabled, enforcementMode, toggleTokenEnforcement, handleUpdateEnforcementConfig, isSubmitting }) {
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between space-x-2", children: [_jsxs("div", { className: "space-y-1", children: [_jsx(Label, { htmlFor: "token-enforcement", children: "Token Enforcement" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "When enabled, users must have tokens to use AI features" })] }), _jsx(Switch, { id: "token-enforcement", checked: isTokenEnforcementEnabled, onCheckedChange: toggleTokenEnforcement, disabled: isSubmitting })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "enforcement-mode", children: "Enforcement Mode" }), _jsxs(Select, { disabled: !isTokenEnforcementEnabled || isSubmitting, value: enforcementMode, onValueChange: (value) => handleUpdateEnforcementConfig(value), children: [_jsx(SelectTrigger, { id: "enforcement-mode", children: _jsx(SelectValue, { placeholder: "Select enforcement mode" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "always", children: "Always (All users)" }), _jsx(SelectItem, { value: "never", children: "Never (Testing only)" }), _jsx(SelectItem, { value: "role_based", children: "Role-based (By user role)" }), _jsx(SelectItem, { value: "mode_based", children: "Mode-based (By chat mode)" }), _jsx(SelectItem, { value: "hard", children: "Hard (Strict enforcement)" }), _jsx(SelectItem, { value: "soft", children: "Soft (Warning only)" })] })] }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Determines how token enforcement is applied across the system" })] })] }));
}
