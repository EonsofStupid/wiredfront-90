import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
export const GeneralSettings = ({ settings, handleSettingChange }) => {
    return (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Model Settings" }), _jsx(CardDescription, { children: "Configure the AI model behavior" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "defaultModel", children: "Default Model" }), _jsxs(Select, { value: settings.defaultModel, onValueChange: (value) => handleSettingChange('general', 'defaultModel', value), children: [_jsx(SelectTrigger, { id: "defaultModel", children: _jsx(SelectValue, { placeholder: "Select a model" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "gpt-4", children: "GPT-4" }), _jsx(SelectItem, { value: "gpt-3.5-turbo", children: "GPT-3.5 Turbo" }), _jsx(SelectItem, { value: "claude-3", children: "Claude 3" }), _jsx(SelectItem, { value: "gemini-pro", children: "Gemini Pro" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "systemPrompt", children: "System Prompt" }), _jsx(Input, { id: "systemPrompt", value: settings.systemPrompt, onChange: (e) => handleSettingChange('general', 'systemPrompt', e.target.value) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "This prompt sets the behavior of the AI assistant" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "flex justify-between", children: _jsxs(Label, { htmlFor: "temperature", children: ["Temperature: ", settings.temperature] }) }), _jsx(Slider, { id: "temperature", min: 0, max: 2, step: 0.1, value: [settings.temperature], onValueChange: ([value]) => handleSettingChange('general', 'temperature', value) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Lower values make responses more deterministic, higher values more creative" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "flex justify-between", children: _jsxs(Label, { htmlFor: "maxTokens", children: ["Max Tokens: ", settings.maxTokens] }) }), _jsx(Slider, { id: "maxTokens", min: 256, max: 4096, step: 256, value: [settings.maxTokens], onValueChange: ([value]) => handleSettingChange('general', 'maxTokens', value) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "space-y-0.5", children: [_jsx(Label, { htmlFor: "streamingEnabled", children: "Streaming Responses" }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Show responses as they are generated" })] }), _jsx(Switch, { id: "streamingEnabled", checked: settings.streamingEnabled, onCheckedChange: (checked) => handleSettingChange('general', 'streamingEnabled', checked) })] })] })] }));
};
