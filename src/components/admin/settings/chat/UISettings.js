import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
export const UISettings = ({ settings, handleSettingChange }) => {
    return (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "User Interface Settings" }), _jsx(CardDescription, { children: "Customize the chat appearance" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "space-y-0.5", children: [_jsx(Label, { htmlFor: "darkMode", children: "Dark Mode" }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Use dark theme for the chat interface" })] }), _jsx(Switch, { id: "darkMode", checked: settings.darkMode, onCheckedChange: (checked) => handleSettingChange('ui', 'darkMode', checked) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "fontSize", children: "Font Size" }), _jsxs(Select, { value: settings.fontSize, onValueChange: (value) => handleSettingChange('ui', 'fontSize', value), children: [_jsx(SelectTrigger, { id: "fontSize", children: _jsx(SelectValue, { placeholder: "Select font size" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "small", children: "Small" }), _jsx(SelectItem, { value: "medium", children: "Medium" }), _jsx(SelectItem, { value: "large", children: "Large" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "messageAlignment", children: "Message Alignment" }), _jsxs(Select, { value: settings.messageAlignment, onValueChange: (value) => handleSettingChange('ui', 'messageAlignment', value), children: [_jsx(SelectTrigger, { id: "messageAlignment", children: _jsx(SelectValue, { placeholder: "Select alignment" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "left", children: "Left" }), _jsx(SelectItem, { value: "right", children: "Right" }), _jsx(SelectItem, { value: "alternate", children: "Alternate" })] })] })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "space-y-0.5", children: [_jsx(Label, { htmlFor: "showTimestamps", children: "Show Timestamps" }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Display time for each message" })] }), _jsx(Switch, { id: "showTimestamps", checked: settings.showTimestamps, onCheckedChange: (checked) => handleSettingChange('ui', 'showTimestamps', checked) })] })] })] }));
};
