import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { ArrowDownUp, RotateCcw, Download, Trash, Search } from "lucide-react";
export function LogsFilterBar({ searchQuery, setSearchQuery, sourceFilter, setSourceFilter, uniqueSources, sortDirection, toggleSortDirection, fetchLogs, downloadLogs, handleClearLogs, isLoading, filteredLogs, logs }) {
    return (_jsxs("div", { className: "flex flex-col sm:flex-row gap-2 justify-between", children: [_jsxs("div", { className: "flex flex-1 gap-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx(Search, { className: "absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" }), _jsx(Input, { placeholder: "Search logs...", className: "pl-9", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value) })] }), _jsxs(Select, { value: sourceFilter || "", onValueChange: (value) => setSourceFilter(value || null), children: [_jsx(SelectTrigger, { className: "w-[180px]", children: _jsx(SelectValue, { placeholder: "All sources" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "", children: "All sources" }), uniqueSources.map(source => (_jsx(SelectItem, { value: source, children: source }, source)))] })] })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { variant: "outline", size: "icon", onClick: toggleSortDirection, title: `Sort ${sortDirection === 'desc' ? 'oldest first' : 'newest first'}`, children: _jsx(ArrowDownUp, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: fetchLogs, disabled: isLoading, title: "Refresh logs", children: _jsx(RotateCcw, { className: `h-4 w-4 ${isLoading ? 'animate-spin' : ''}` }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: downloadLogs, disabled: filteredLogs.length === 0 || isLoading, title: "Download logs", children: _jsx(Download, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "destructive", size: "icon", onClick: handleClearLogs, disabled: logs.length === 0 || isLoading, title: "Clear all logs", children: _jsx(Trash, { className: "h-4 w-4" }) })] })] }));
}
