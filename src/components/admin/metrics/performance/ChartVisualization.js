import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from "recharts";
import { Clock } from "lucide-react";
export function ChartVisualization({ data, chartType, activeMetric, currentMetric }) {
    return (_jsxs("div", { className: "relative z-10", children: [_jsx("div", { className: "h-[300px] w-full", children: _jsx(ResponsiveContainer, { width: "100%", height: "100%", children: chartType === 'line' ? (_jsxs(LineChart, { data: data, margin: { top: 5, right: 5, left: 5, bottom: 5 }, children: [_jsx("defs", { children: _jsxs("linearGradient", { id: `gradient-${activeMetric}`, x1: "0", y1: "0", x2: "0", y2: "1", children: [_jsx("stop", { offset: "5%", stopColor: currentMetric.color, stopOpacity: 0.8 }), _jsx("stop", { offset: "95%", stopColor: currentMetric.color, stopOpacity: 0.2 })] }) }), _jsx(CartesianGrid, { strokeDasharray: "3 3", stroke: "#333", opacity: 0.3 }), _jsx(XAxis, { dataKey: "time", tick: { fill: 'rgba(255,255,255,0.6)', fontSize: 12 }, axisLine: { stroke: '#333' }, tickLine: { stroke: '#333' } }), _jsx(YAxis, { tick: { fill: 'rgba(255,255,255,0.6)', fontSize: 12 }, axisLine: { stroke: '#333' }, tickLine: { stroke: '#333' }, unit: currentMetric.unit }), _jsx(Tooltip, { contentStyle: {
                                    backgroundColor: 'rgba(26, 31, 44, 0.8)',
                                    borderColor: 'rgba(139, 92, 246, 0.3)',
                                    borderRadius: '0.5rem',
                                    backdropFilter: 'blur(8px)',
                                    color: 'white',
                                    boxShadow: '0 4px 20px rgba(0,0,0,0.3)'
                                }, itemStyle: { color: currentMetric.color }, labelStyle: { color: 'rgba(255,255,255,0.8)' }, formatter: (value) => [`${value}${currentMetric.unit}`, currentMetric.name], labelFormatter: (label) => `Time: ${label}` }), _jsx(Line, { type: "monotone", dataKey: activeMetric, stroke: currentMetric.color, strokeWidth: 2, dot: { fill: currentMetric.color, r: 4, strokeWidth: 0 }, activeDot: { r: 6, stroke: currentMetric.color, strokeWidth: 2, fill: 'white' } })] })) : (_jsxs(AreaChart, { data: data, margin: { top: 5, right: 5, left: 5, bottom: 5 }, children: [_jsx("defs", { children: _jsxs("linearGradient", { id: `gradient-${activeMetric}`, x1: "0", y1: "0", x2: "0", y2: "1", children: [_jsx("stop", { offset: "5%", stopColor: currentMetric.color, stopOpacity: 0.8 }), _jsx("stop", { offset: "95%", stopColor: currentMetric.color, stopOpacity: 0.1 })] }) }), _jsx(CartesianGrid, { strokeDasharray: "3 3", stroke: "#333", opacity: 0.3 }), _jsx(XAxis, { dataKey: "time", tick: { fill: 'rgba(255,255,255,0.6)', fontSize: 12 }, axisLine: { stroke: '#333' }, tickLine: { stroke: '#333' } }), _jsx(YAxis, { tick: { fill: 'rgba(255,255,255,0.6)', fontSize: 12 }, axisLine: { stroke: '#333' }, tickLine: { stroke: '#333' }, unit: currentMetric.unit }), _jsx(Tooltip, { contentStyle: {
                                    backgroundColor: 'rgba(26, 31, 44, 0.8)',
                                    borderColor: 'rgba(139, 92, 246, 0.3)',
                                    borderRadius: '0.5rem',
                                    backdropFilter: 'blur(8px)',
                                    color: 'white',
                                    boxShadow: '0 4px 20px rgba(0,0,0,0.3)'
                                }, itemStyle: { color: currentMetric.color }, labelStyle: { color: 'rgba(255,255,255,0.8)' }, formatter: (value) => [`${value}${currentMetric.unit}`, currentMetric.name], labelFormatter: (label) => `Time: ${label}` }), _jsx(Area, { type: "monotone", dataKey: activeMetric, stroke: currentMetric.color, strokeWidth: 2, fillOpacity: 1, fill: `url(#gradient-${activeMetric})`, dot: { fill: currentMetric.color, r: 4, strokeWidth: 0 }, activeDot: { r: 6, stroke: currentMetric.color, strokeWidth: 2, fill: 'white' } })] })) }) }), _jsxs("div", { className: "flex items-center justify-center mt-4 text-white/60 text-xs", children: [_jsx(Clock, { className: "h-3 w-3 mr-1" }), " Data refreshes every 30 seconds"] })] }));
}
