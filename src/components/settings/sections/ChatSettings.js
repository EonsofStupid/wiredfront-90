import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useChatStore } from "@/components/chat/store/chatStore";
import { useChatButtonStore } from "@/components/chat/store/chatButtonStore";
import { toast } from "sonner";
import styles from "../styles/ChatSettings.module.css";
import { ChatButton } from "@/components/chat/components/ChatButton";
export function ChatSettings() {
    const { currentMode, setCurrentMode, selectedModel, availableProviders, currentProvider, updateCurrentProvider, features, toggleFeature } = useChatStore();
    const { position, setPosition, scale, setScale, docked, toggleDocked, features: buttonFeatures, toggleFeature: toggleButtonFeature } = useChatButtonStore();
    const handlePositionChange = (newPosition) => {
        setPosition(newPosition);
    };
    const handleScaleChange = (newScale) => {
        setScale(Math.max(0.5, Math.min(2, newScale)));
    };
    const handleClearHistory = () => {
        if (window.confirm("Are you sure you want to clear all chat history? This cannot be undone.")) {
            // Clear chat history through store
            toast.success("Chat history cleared successfully");
        }
    };
    return (_jsxs("div", { className: styles.settingsContainer, children: [_jsxs("div", { children: [_jsx("h3", { className: styles.sectionTitle, children: "Chat Preferences" }), _jsx("p", { className: styles.sectionDescription, children: "Customize how the chat interface appears and behaves" })] }), _jsxs("div", { className: styles.settingsForm, children: [_jsxs("div", { className: styles.settingsCard, children: [_jsx("div", { className: styles.settingsCardHeader, children: _jsx("h4", { className: styles.settingsCardTitle, children: "Position & Appearance" }) }), _jsxs("div", { className: styles.formGroup, children: [_jsx(Label, { children: "Chat Button Position" }), _jsxs("div", { className: styles.positionOptions, children: [_jsxs("div", { className: `${styles.positionOption} ${position === 'bottom-left' ? styles.positionOptionSelected : ''}`, onClick: () => handlePositionChange('bottom-left'), children: [_jsx("div", { className: `${styles.positionOptionIndicator} ${styles.positionOptionLeft}` }), "Bottom Left"] }), _jsxs("div", { className: `${styles.positionOption} ${position === 'bottom-right' ? styles.positionOptionSelected : ''}`, onClick: () => handlePositionChange('bottom-right'), children: [_jsx("div", { className: `${styles.positionOptionIndicator} ${styles.positionOptionRight}` }), "Bottom Right"] })] })] }), _jsxs("div", { className: styles.formGroup, children: [_jsx(Label, { children: "Button Size" }), _jsxs("div", { className: styles.formRow, children: [_jsx("span", { children: "Scale" }), _jsxs("div", { className: "flex items-center", children: [_jsx("input", { type: "range", min: "0.5", max: "2", step: "0.1", value: scale, onChange: (e) => handleScaleChange(parseFloat(e.target.value)), className: "w-32 mr-2" }), _jsxs("span", { children: [scale.toFixed(1), "x"] })] })] })] }), _jsxs("div", { className: styles.formGroup, children: [_jsx(Label, { children: "Docked Mode" }), _jsxs("div", { className: styles.formRow, children: [_jsx("span", { children: "Keep chat window docked" }), _jsx(Switch, { checked: docked, onCheckedChange: toggleDocked })] })] }), _jsxs("div", { className: styles.previewContainer, children: [_jsx("span", { className: styles.previewLabel, children: "Preview" }), _jsx(ChatButton, { position: position, scale: scale, onClick: () => { }, isPreview: true })] })] }), _jsxs("div", { className: styles.settingsCard, children: [_jsx("div", { className: styles.settingsCardHeader, children: _jsx("h4", { className: styles.settingsCardTitle, children: "Behavior" }) }), _jsxs("div", { className: styles.formRow, children: [_jsxs("div", { children: [_jsx("span", { children: "Start Minimized" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Open chat in minimized state" })] }), _jsx(Switch, { checked: buttonFeatures.startMinimized, onCheckedChange: () => toggleButtonFeature('startMinimized') })] }), _jsxs("div", { className: styles.formRow, children: [_jsxs("div", { children: [_jsx("span", { children: "Show Timestamps" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Display time for each message" })] }), _jsx(Switch, { checked: buttonFeatures.showTimestamps, onCheckedChange: () => toggleButtonFeature('showTimestamps') })] }), _jsxs("div", { className: styles.formRow, children: [_jsxs("div", { children: [_jsx("span", { children: "Save History" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Persist chat history between sessions" })] }), _jsx(Switch, { checked: buttonFeatures.saveHistory, onCheckedChange: () => toggleButtonFeature('saveHistory') })] })] }), _jsxs("div", { className: styles.settingsCard, children: [_jsx("div", { className: styles.settingsCardHeader, children: _jsx("h4", { className: styles.settingsCardTitle, children: "AI Provider Settings" }) }), _jsxs("div", { className: styles.formGroup, children: [_jsx(Label, { children: "Default Provider" }), _jsxs(Select, { value: currentProvider?.id || '', onValueChange: (value) => {
                                            const provider = availableProviders.find(p => p.id === value);
                                            if (provider)
                                                updateCurrentProvider(provider);
                                        }, children: [_jsx(SelectTrigger, { className: "w-full", children: _jsx(SelectValue, { placeholder: "Select provider" }) }), _jsx(SelectContent, { children: availableProviders.map(provider => (_jsx(SelectItem, { value: provider.id, children: provider.name }, provider.id))) })] })] }), _jsxs("div", { className: styles.formGroup, children: [_jsx(Label, { children: "Default Model" }), _jsxs(Select, { value: selectedModel, onValueChange: (value) => setCurrentMode(value), children: [_jsx(SelectTrigger, { className: "w-full", children: _jsx(SelectValue, { placeholder: "Select model" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "gpt-3.5-turbo", children: "GPT-3.5 Turbo" }), _jsx(SelectItem, { value: "gpt-4", children: "GPT-4" }), _jsx(SelectItem, { value: "claude-3-haiku", children: "Claude 3 Haiku" }), _jsx(SelectItem, { value: "claude-3-sonnet", children: "Claude 3 Sonnet" }), _jsx(SelectItem, { value: "gemini-pro", children: "Gemini Pro" })] })] })] })] }), _jsxs("div", { className: styles.settingsCard, children: [_jsx("div", { className: styles.settingsCardHeader, children: _jsx("h4", { className: styles.settingsCardTitle, children: "Features" }) }), Object.entries(features).map(([feature, enabled]) => (_jsxs("div", { className: styles.formRow, children: [_jsx("div", { children: _jsx("span", { children: feature.replace(/([A-Z])/g, ' $1').trim() }) }), _jsx(Switch, { checked: enabled, onCheckedChange: () => toggleFeature(feature) })] }, feature)))] }), _jsx("div", { className: styles.actionButtons, children: _jsx(Button, { variant: "destructive", onClick: handleClearHistory, children: "Clear Chat History" }) })] })] }));
}
export default ChatSettings;
