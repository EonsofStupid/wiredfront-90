import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Loader2 } from 'lucide-react';
import sdk from '@stackblitz/sdk';

interface LivePreviewProps {
  files: Record<string, string>;
  activeFile: string;
}

export const LivePreview = ({ files, activeFile }: LivePreviewProps) => {
  const [stackBlitzUrl, setStackBlitzUrl] = useState<string>('');
  const [viteUrl, setViteUrl] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    const createStackBlitzProject = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        // Create StackBlitz project configuration
        const project = {
          files: files,
          title: 'Live Preview',
          description: 'Generated by AI Assistant',
          template: 'typescript' as const,
          dependencies: {
            'react': '^18.2.0',
            'react-dom': '^18.2.0',
            '@types/react': '^18.2.0',
            '@types/react-dom': '^18.2.0',
            'typescript': '^5.0.2',
            'vite': '^4.4.5'
          }
        };

        // Create the project and get the URL
        const vm = await sdk.embedProject('live-preview', project, {
          openFile: activeFile,
          hideNavigation: true,
          theme: 'dark',
          clickToLoad: true // Add this to prevent immediate loading
        });

        if (!mounted) return;

        // Get the project URL using the project ID from the VM
        const projectId = vm.getDependencies ? await vm.getDependencies() : '';
        const projectUrl = `https://stackblitz.com/edit/${projectId}`;
        
        if (mounted) {
          setStackBlitzUrl(projectUrl);

          // Create Vite URL
          const viteParams = new URLSearchParams({
            file: activeFile,
            terminal: 'dev',
            preview: '5173'
          });
          const viteProjectUrl = `https://vite.new/react-ts?${viteParams}`;
          setViteUrl(viteProjectUrl);
        }
      } catch (error) {
        console.error('Error creating preview:', error);
        if (mounted) {
          setError('Failed to load preview');
        }
      } finally {
        if (mounted) {
          setIsLoading(false);
        }
      }
    };

    createStackBlitzProject();

    return () => {
      mounted = false;
    };
  }, [files, activeFile]);

  if (error) {
    return (
      <Card className="h-full flex items-center justify-center">
        <div className="text-center">
          <p className="text-destructive">{error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-4 px-4 py-2 bg-primary text-primary-foreground rounded-md"
          >
            Retry
          </button>
        </div>
      </Card>
    );
  }

  return (
    <Card className="h-full">
      <Tabs defaultValue="stackblitz" className="w-full h-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="stackblitz">StackBlitz</TabsTrigger>
          <TabsTrigger value="vite">Vite</TabsTrigger>
          <TabsTrigger value="preview">Live Preview</TabsTrigger>
        </TabsList>
        
        <TabsContent value="stackblitz" className="h-[calc(100%-40px)]">
          {isLoading ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : (
            <iframe
              src={stackBlitzUrl}
              className="w-full h-full border-0"
              title="StackBlitz Editor"
              allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
              sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
              loading="lazy"
            />
          )}
        </TabsContent>

        <TabsContent value="vite" className="h-[calc(100%-40px)]">
          {isLoading ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : (
            <iframe
              src={viteUrl}
              className="w-full h-full border-0"
              title="Vite Editor"
              allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
              sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
              loading="lazy"
            />
          )}
        </TabsContent>

        <TabsContent value="preview" className="h-[calc(100%-40px)]">
          {isLoading ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : (
            <iframe
              src={`${stackBlitzUrl}?view=preview`}
              className="w-full h-full border-0"
              title="Live Preview"
              allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
              sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
              loading="lazy"
            />
          )}
        </TabsContent>
      </Tabs>
    </Card>
  );
};